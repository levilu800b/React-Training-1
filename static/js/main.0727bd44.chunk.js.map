{"version":3,"sources":["Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","state","count","this","setState","Card","className","id","counterName","Body","Button","onClick","buttonHandler","resetCounter","React","Component","App","counterRefs","counters","forEach","r","current","i","ref","createRef","newCounter","createCounter","length","concat","slice","Container","Row","Col","resetHandler","addCounter","removeCounter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAuCeA,E,kDAlCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GAHQ,E,4DAQjBC,KAAKC,UAAS,SAACH,GAAD,MAAY,CACxBC,MAAOD,EAAMC,MAAQ,Q,qCAKvBC,KAAKC,SAAS,CACZF,MAAO,M,+BAID,IAAD,OACP,OACE,mCACE,cAACG,EAAA,EAAD,CAAMC,UAAU,UAAUC,GAAIJ,KAAKH,MAAMQ,YAAzC,SACE,eAACH,EAAA,EAAKI,KAAN,WACE,mCAAMN,KAAKH,MAAMQ,eACjB,4BAAIL,KAAKF,MAAMC,QACf,cAACQ,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,iBAA5B,6BACA,cAACF,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKE,gBAA5B,+B,GA5BUC,IAAMC,WCgFbC,E,kDA1Eb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXgB,YAAa,GACbC,SAAU,IAJK,E,2DASjBf,KAAKF,MAAMgB,YAAYE,SAAQ,SAACC,GAAD,OAAOA,EAAEC,QAAQR,oB,oCAIpCS,EAAGC,GACf,OAAS,cACP,EADO,CACCf,YACN,WAAac,EAAI,GAKnBC,IACEA,GAHAD,K,mCASQ,IAAD,OACXnB,KAAKC,UAAS,SAACH,GACb,IAAMsB,EAAMT,IAAMU,YACZC,EAAa,EAAKC,cAAczB,EAAMiB,SAASS,OAAQJ,GAC7D,MAAQ,CACNL,SAAUjB,EAAMiB,SAASU,OAAOH,GAChCR,YAAahB,EAAMgB,YAAYW,OAAOL,S,sCAM1CpB,KAAKC,UAAS,SAACH,GACb,MAAQ,CACNiB,SAAUjB,EAAMiB,SAASW,MAAM,EAAG5B,EAAMiB,SAASS,OAAS,GAC1DV,YAAahB,EAAMgB,YAAYY,MAAM,EAAG5B,EAAMgB,YAAYU,OAAS,S,+BAM/D,IAAD,OACT,OACE,mCACE,eAACG,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAK1B,UAAU,cAAf,SACE,cAACI,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKsB,gBAA5B,0BAEF,cAACD,EAAA,EAAD,CAAK1B,UAAU,cAAf,SACE,cAACI,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKuB,cAA5B,4BAEF,cAACF,EAAA,EAAD,CAAK1B,UAAU,cAAf,SACE,cAACI,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKwB,iBAA5B,kCAGJ,cAACJ,EAAA,EAAD,UACG5B,KAAKF,MAAMiB,oB,GAlEJJ,IAAMC,WCGTqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0727bd44.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  buttonHandler() {\r\n    this.setState((state) => ({\r\n      count: state.count + 1\r\n    }))\r\n  }\r\n\r\n  resetCounter() {\r\n    this.setState({\r\n      count: 0\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Card className=\"counter\" id={this.props.counterName}>\r\n          <Card.Body>\r\n            <h3> {this.props.counterName}</h3>\r\n            <p>{this.state.count}</p>\r\n            <Button onClick={() => this.buttonHandler()}> increace count</Button>\r\n            <Button onClick={() => this.resetCounter()}> reset</Button>\r\n          </Card.Body>\r\n        </Card>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Counter;\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport './App.scss';\nimport Counter from './Counter';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      counterRefs: [],\n      counters: []\n    }\n  }\n\n  resetHandler() {\n    this.state.counterRefs.forEach((r) => r.current.resetCounter())\n  }\n\n\n  createCounter(i, ref) {\n    return ( <\n      Counter counterName = {\n        \"counter\" + (i + 1)\n      }\n      key = {\n        i\n      }\n      ref = {\n        ref\n      }\n      />\n    )\n  }\n\n  addCounter() {\n    this.setState((state) => {\n      const ref = React.createRef();\n      const newCounter = this.createCounter(state.counters.length, ref);\n      return ({\n        counters: state.counters.concat(newCounter),\n        counterRefs: state.counterRefs.concat(ref)\n      })\n    })\n  }\n\n  removeCounter() {\n    this.setState((state) => {\n      return ({\n        counters: state.counters.slice(0, state.counters.length - 1),\n        counterRefs: state.counterRefs.slice(0, state.counterRefs.length - 1)\n      })\n    })\n  }\n\n\n  render() {\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col className=\"text-center\">\n            <Button onClick={() => this.resetHandler()} > Reset All</Button>\n          </Col>\n          <Col className=\"text-center\">\n            <Button onClick={() => this.addCounter()} > Add Counter</Button>\n          </Col>\n          <Col className=\"text-center\">\n            <Button onClick={() => this.removeCounter()} > Remove Counter</Button>\n          </Col>\n        </Row>\n        <Row>\n          {this.state.counters}\n        </Row>\n      </Container>\n    </>\n  );\n}\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}